<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" language="Java" filename="JBBPCustomFieldTypeProcessor.java"><comment type="block">/*
 * Copyright 2015 Igor Maznitsa.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name>com</name>.<name>igormaznitsa</name>.<name>jbbp</name>;</package>

<import>import <name>com</name>.<name>igormaznitsa</name>.<name>jbbp</name>.<name>compiler</name>.<name>JBBPNamedFieldInfo</name>;</import>
<import>import <name>com</name>.<name>igormaznitsa</name>.<name>jbbp</name>.<name>compiler</name>.<name>tokenizer</name>.<name>JBBPFieldTypeParameterContainer</name>;</import>
<import>import <name>com</name>.<name>igormaznitsa</name>.<name>jbbp</name>.<name>io</name>.<name>JBBPBitInputStream</name>;</import>
<import>import <name>com</name>.<name>igormaznitsa</name>.<name>jbbp</name>.<name>io</name>.<name>JBBPBitOrder</name>;</import>
<import>import <name>com</name>.<name>igormaznitsa</name>.<name>jbbp</name>.<name>model</name>.<name>JBBPAbstractField</name>;</import>
<import>import <name>java</name>.<name>io</name>.<name>IOException</name>;</import>

<comment type="javadoc">/**
 * Allows to define and process own custom field types during parsing.
 * 
 * @since 1.2.0
 */</comment>
<class type="interface"><specifier>public</specifier> interface <name>JBBPCustomFieldTypeProcessor</name>  <block>{
  <comment type="javadoc">/**
   * Get custom types of fields supported by the custom type field processor.
   * @return array of strings where every string is custom field type in lower-case.
   */</comment>
  <function_decl><type><name>String</name> <index>[]</index></type> <name>getCustomFieldTypes</name><parameter_list>()</parameter_list>;</function_decl>
  
  <comment type="javadoc">/**
   * Called by compiler to check parameters for custom field.
   * @param fieldType field type info, it must not be null
   * @param fieldName name of the field, it can be null for anonymous fields
   * @param extraData number placed as extra value for field, followed by ':' if not presented then zero, if it is expression then -1
   * @param isArray flag shows that the field describes an array
   * @return true if such configuration allowed, false otherwise
   */</comment>
  <function_decl><type><name>boolean</name></type> <name>isAllowed</name><parameter_list>(<param><decl><type><name>JBBPFieldTypeParameterContainer</name></type> <name>fieldType</name></decl></param>, <param><decl><type><name>String</name></type> <name>fieldName</name></decl></param>, <param><decl><type><name>int</name></type> <name>extraData</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>isArray</name></decl></param>)</parameter_list>;</function_decl>
  
  <comment type="javadoc">/**
   * Read custom field from stream and return the data as a JBBP field.
   * @param in the data source stream, must not be null
   * @param bitOrder the bit order defined for parsing, must not be null
   * @param parserFlags the flags defined for parsing
   * @param customTypeFieldInfo the current field type info, must not be null
   * @param fieldName the field name info, it can be null if the field is anonymous one
   * @param extraData extra numeric value for the field, followed by ':', if not presented then 0
   * @param readWholeStream if true then the field is array which should contain parse data for whole stream till the end
   * @param arrayLength -1 if it is not array else length of the array to be read.
   * @return parsed data as JBBP field, must not be null
   * @throws IOException it can be thrown for transport errors
   */</comment>
  <function_decl><type><name>JBBPAbstractField</name></type> <name>readCustomFieldType</name><parameter_list>(<param><decl><type><name>JBBPBitInputStream</name></type> <name>in</name></decl></param>, <param><decl><type><name>JBBPBitOrder</name></type> <name>bitOrder</name></decl></param>, <param><decl><type><name>int</name></type> <name>parserFlags</name></decl></param>, <param><decl><type><name>JBBPFieldTypeParameterContainer</name></type> <name>customTypeFieldInfo</name></decl></param>, <param><decl><type><name>JBBPNamedFieldInfo</name></type> <name>fieldName</name></decl></param>, <param><decl><type><name>int</name></type> <name>extraData</name></decl></param>, <param><decl><type><name>boolean</name></type> <name>readWholeStream</name></decl></param>, <param><decl><type><name>int</name></type> <name>arrayLength</name></decl></param>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>
}</block></class>
</unit>
